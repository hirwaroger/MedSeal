type UserRole = variant { Doctor; Patient; Admin; };

type VerificationStatus = variant { Pending; Approved; Rejected; NotRequired; };

type PrescriptionMedicine = record { name: text; dose: text; instructions: text; };

type Medicine = record {
  id: text;
  name: text;
  dosage: text;
  frequency: text;
  duration: text;
  side_effects: text;
  guide_text: text;
  guide_source: text;
  description: text;
  created_at: nat64;
  created_by: text;
  doctor_id: text;
  is_active: bool;
};

type Prescription = record {
  id: text;
  prescription_code: text;
  patient_name: text;
  patient_contact: text;
  patient_principal: opt text;
  medicines: vec PrescriptionMedicine;
  additional_notes: text;
  created_at: nat64;
  accessed_at: opt nat64;
  doctor_id: text;
};

type VerificationRequest = record {
  id: text;
  doctor_id: text;
  institution_name: text;
  institution_website: text;
  license_authority: text;
  license_authority_website: text;
  medical_license_number: text;
  additional_documents: vec text;
  submitted_at: nat64;
  processed_at: opt nat64;
  processed_by: opt text;
  admin_notes: opt text;
  status: VerificationStatus;
};

type User = record {
  id: text;
  name: text;
  email: text;
  role: UserRole;
  license_number: text;
  user_principal: text;
  created_at: nat64;
  verification_status: VerificationStatus;
  verification_request: opt VerificationRequest;
  last_active: opt nat64;
  total_prescriptions: nat64;
  total_medicines: nat64;
};

type SubmitVerificationRequest = record {
  institution_name: text;
  institution_website: text;
  license_authority: text;
  license_authority_website: text;
  medical_license_number: text;
  additional_documents: vec text;
};

type ProcessVerificationRequest = record { verification_id: text; status: VerificationStatus; admin_notes: vec text };

type UserStats = record {
  user_id: text; name: text; email: text; role: UserRole; verification_status: VerificationStatus; last_active: opt nat64; total_prescriptions: nat64; total_medicines: nat64; created_at: nat64;
};

type SystemOverview = record {
  total_doctors: nat64; total_patients: nat64; verified_doctors: nat64; unverified_doctors: nat64; pending_verifications: nat64; total_prescriptions: nat64; total_medicines: nat64;
};

type VerificationStatusInfo = record { doctor_id: text; doctor_name: text; verification_status: VerificationStatus; verification_request: opt VerificationRequest };

type PrincipalEntry = record { principal_ent : text; user_id : text; email : text };

// Result types
type Result_User = variant { Ok: User; Err: text };
type Result_Medicine = variant { Ok: Medicine; Err: text };
type Result_Medicines = variant { Ok: vec Medicine; Err: text };
type Result_Text = variant { Ok: text; Err: text };
type Result_Prescription = variant { Ok: Prescription; Err: text };
type Result_VecUser = variant { Ok: vec User; Err: text };
type Result_UserStats = variant { Ok: UserStats; Err: text };
type Result_SystemOverview = variant { Ok: SystemOverview; Err: text };
type Result_VecVerification = variant { Ok: vec VerificationRequest; Err: text };
type Result_Verification = variant { Ok: VerificationRequest; Err: text };
type Result_VerificationStatusInfo = variant { Ok: VerificationStatusInfo; Err: text };

service : {
  // User functions
  register_user: (record { name: text; email: text; role: UserRole; license_number: text }) -> (Result_User);
  register_user_with_principal: (record { name: text; email: text; role: UserRole; license_number: text; user_principal: text }) -> (Result_User);
  register_user_simple: (text, text, UserRole, text) -> (Result_User);
  get_user: (text) -> (opt User) query;
  list_user_principals: () -> (vec PrincipalEntry) query; // (principal_ent, user_id, email)

  // Prescriptions / Medicines
  create_prescription: (Prescription) -> (Result_Text);
  get_prescription: (text) -> (opt Prescription) query;
  get_prescription_by_code: (text) -> (opt Prescription) query;
  get_all_medicines: () -> (vec Medicine) query;
  get_doctor_medicines: (text) -> (vec Medicine) query;
  get_doctor_prescriptions: (text) -> (vec Prescription) query;
  add_medicine: (record { name: text; dosage: text; frequency: text; duration: text; side_effects: text; guide_text: text; guide_source: text }) -> (Result_Medicine);
  toggle_medicine_status: (text) -> (Result_Medicine);

  // Admin functions
  admin_exists: () -> (bool) query;
  get_all_doctors: () -> (Result_VecUser) query;
  get_all_patients: () -> (Result_VecUser) query;
  get_user_stats: (text) -> (Result_UserStats) query;
  get_system_overview: () -> (Result_SystemOverview) query;

  // Verification functions
  submit_verification_request: (SubmitVerificationRequest) -> (Result_Text);
  get_all_verification_requests: () -> (Result_VecVerification) query;
  get_pending_verification_requests: () -> (Result_VecVerification) query;
  get_verification_request: (text) -> (Result_Verification) query;
  process_verification_request: (ProcessVerificationRequest) -> (Result_Text);
  get_doctor_verification_status: (text) -> (Result_VerificationStatusInfo) query;

  // Utilities
  greet: (text) -> (text) query;
  icrc10_supported_standards: () -> (vec text) query;
  icrc28_trusted_origins: () -> (text);
};