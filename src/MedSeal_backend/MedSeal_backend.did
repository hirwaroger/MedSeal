type UserRole = variant {
    Doctor;
    Patient;
};

type User = record {
    id: text;
    name: text;
    email: text;
    role: UserRole;
    license_number: text;
    user_principal: text; // Ensure this field is present and used
    created_at: nat64;
};

type Medicine = record {
    id: text;
    name: text;
    dosage: text;
    frequency: text;
    duration: text;
    side_effects: text;
    guide_text: text; // Changed to required
    guide_source: text; // Changed to required
    created_by: text;
    created_at: nat64;
    is_active: bool;
};

type PrescriptionMedicine = record {
    medicine_id: text;
    custom_dosage: opt text;
    custom_instructions: text;
};

type Prescription = record {
    id: text;
    prescription_code: text;
    doctor_id: text;
    patient_name: text;
    patient_contact: text;
    medicines: vec PrescriptionMedicine;
    additional_notes: text;
    created_at: nat64;
    accessed_at: opt nat64;
    patient_principal: opt text; // NEW: principal who claimed the prescription
};

type RegisterUserRequest = record {
    name: text;
    email: text;
    role: UserRole;
    license_number: text;
};

type RegisterUserWithPrincipalRequest = record {
    name: text;
    email: text;
    role: UserRole;
    license_number: text;
    user_principal: text;
};

type CreateMedicineRequest = record {
    name: text;
    dosage: text;
    frequency: text;
    duration: text;
    side_effects: text;
    guide_text: text; // Changed to required
    guide_source: text; // Changed to required
};

type CreatePrescriptionRequest = record {
    patient_name: text;
    patient_contact: text;
    medicines: vec PrescriptionMedicine;
    additional_notes: text;
};

type Result_User = variant {
    Ok: User;
    Err: text;
};

type Result_Medicine = variant {
    Ok: Medicine;
    Err: text;
};

type Result_Prescription = variant {
    Ok: Prescription;
    Err: text;
};

type Result_String = variant {
    Ok: text;
    Err: text;
};

type ChatMessage = record {
    role: text;
    content: text;
};

type GeneralChatContext = record {
    user_type: text;
};

type PrescriptionChatContext = record {
    user_type: text;
    prescription_data: text;
};

type MedicineChatContext = record {
    user_type: text;
    medicine_data: text;
};

service : {
    // User Management
    "register_user": (RegisterUserRequest) -> (Result_User);
    "register_user_with_principal": (RegisterUserWithPrincipalRequest) -> (Result_User);
    "register_user_simple": (text, text, UserRole, text) -> (Result_User);
    "get_user": (text) -> (opt User) query;
    "get_user_by_principal": (text) -> (Result_User) query;
    "get_user_by_principal_detailed": (text) -> (Result_User) query;
    "principal_has_account": (text) -> (bool) query;
    "list_user_principals": () -> (vec record { text; text; text }) query; // (principal, user_id, email)
    "authenticate_user": (text, text) -> (Result_User) query;
    
    // Medicine Repository (Doctors only)
    "add_medicine": (CreateMedicineRequest) -> (Result_Medicine);
    "get_doctor_medicines": (text) -> (vec Medicine) query;
    "get_medicine": (text) -> (opt Medicine) query;
    "get_medicine_guide_text": (text) -> (opt text) query;
    "update_medicine": (text, CreateMedicineRequest) -> (Result_Medicine);
    "toggle_medicine_status": (text) -> (Result_Medicine);
    
    // Prescription Management
    "create_prescription": (CreatePrescriptionRequest) -> (Result_String);
    "get_prescription": (text, text) -> (Result_Prescription) query;
    "get_doctor_prescriptions": (text) -> (vec Prescription) query;
    
    // Debug and test methods
    "test_backend_connection": () -> (text) query;
    "get_all_medicines_debug": () -> (vec Medicine) query;
    "get_current_caller": () -> (text) query;
    "get_principal_mapping_debug": () -> (vec record { text; text }) query;
    "debug_get_prescription_with_medicines": (text) -> (Result_String) query;
    "debug_all_users": () -> (vec record { text; text; text }) query;
    
    // Utility
    "generate_user_id": () -> (text);
    "greet": (text) -> (text) query;
    
    // AI Assistant Functions - Separated by context
    "chat_general": (vec ChatMessage, GeneralChatContext) -> (Result_String);
    "chat_prescription": (vec ChatMessage, PrescriptionChatContext) -> (Result_String);
    "chat_medicine": (vec ChatMessage, MedicineChatContext) -> (Result_String);
    "get_prescription_ai_help": (text, text, text) -> (Result_String);
    "get_medicine_ai_help": (text) -> (Result_String);
}