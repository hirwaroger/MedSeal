type UserRole = variant { Doctor; Patient; Admin; NGO; };

type VerificationStatus = variant { Pending; Approved; Rejected; NotRequired; };

type PrescriptionMedicine = record { 
  medicine_id: text; 
  custom_dosage: opt text; 
  custom_instructions: text; 
};

type CreatePrescriptionRequest = record {
  patient_name: text;
  patient_contact: text;
  medicines: vec PrescriptionMedicine;
  additional_notes: text;
};

type Medicine = record {
  id: text;
  name: text;
  dosage: text;
  frequency: text;
  duration: text;
  side_effects: text;
  guide_text: text;
  guide_source: text;
  description: text;
  created_at: nat64;
  created_by: text;
  doctor_id: text;
  is_active: bool;
};

type Prescription = record {
  id: text;
  prescription_code: text;
  patient_name: text;
  patient_contact: text;
  patient_principal: opt text;
  medicines: vec PrescriptionMedicine;
  additional_notes: text;
  created_at: nat64;
  accessed_at: opt nat64;
  doctor_id: text;
};

type VerificationRequest = record {
  id: text;
  doctor_id: text;
  institution_name: text;
  institution_website: text;
  license_authority: text;
  license_authority_website: text;
  medical_license_number: text;
  additional_documents: vec text;
  submitted_at: nat64;
  processed_at: opt nat64;
  processed_by: opt text;
  admin_notes: opt text;
  status: VerificationStatus;
};

type User = record {
  id: text;
  name: text;
  email: text;
  role: UserRole;
  license_number: text;
  user_principal: text;
  created_at: nat64;
  verification_status: VerificationStatus;
  verification_request: opt VerificationRequest;
  last_active: opt nat64;
  total_prescriptions: nat64;
  total_medicines: nat64;
};

type SubmitVerificationRequest = record {
  institution_name: text;
  institution_website: text;
  license_authority: text;
  license_authority_website: text;
  medical_license_number: text;
  additional_documents: vec text;
};

type ProcessVerificationRequest = record { verification_id: text; status: VerificationStatus; admin_notes: vec text };

type UserStats = record {
  user_id: text; name: text; email: text; role: UserRole; verification_status: VerificationStatus; last_active: opt nat64; total_prescriptions: nat64; total_medicines: nat64; created_at: nat64;
};

type SystemOverview = record {
  total_doctors: nat64; total_patients: nat64; verified_doctors: nat64; unverified_doctors: nat64; pending_verifications: nat64; total_prescriptions: nat64; total_medicines: nat64;
};

type VerificationStatusInfo = record { doctor_id: text; doctor_name: text; verification_status: VerificationStatus; verification_request: opt VerificationRequest };

type PrincipalEntry = record { principal_ent : text; user_id : text; email : text };

type CaseStatus = variant { Pending; UnderReview; Approved; Rejected; Funded; Closed; };

type CaseUrgency = variant { Low; Medium; High; Critical; };

type PatientCase = record {
  id: text;
  patient_id: text;
  patient_name: text;
  patient_contact: text;
  case_title: text;
  case_description: text;
  medical_condition: text;
  required_amount: nat64;
  supporting_documents: vec text;
  urgency_level: CaseUrgency;
  status: CaseStatus;
  created_at: nat64;
  reviewed_at: opt nat64;
  reviewed_by: opt text;
  admin_notes: opt text;
};

type ContributionPool = record {
  id: text;
  case_id: text;
  ngo_id: text;
  ngo_name: text;
  target_amount: nat64;
  current_amount: nat64;
  contributors_count: nat64;
  pool_title: text;
  pool_description: text;
  created_at: nat64;
  deadline: opt nat64;
  is_active: bool;
  is_completed: bool;
};

type Contribution = record {
  id: text;
  pool_id: text;
  contributor_principal: text;
  amount: nat64;
  message: opt text;
  contributed_at: nat64;
  is_anonymous: bool;
};

type SubmitCaseRequest = record {
  case_title: text;
  case_description: text;
  medical_condition: text;
  required_amount: nat64;
  supporting_documents: vec text;
  urgency_level: CaseUrgency;
};

type CreatePoolRequest = record {
  case_id: text;
  target_amount: nat64;
  pool_title: text;
  pool_description: text;
  deadline_days: opt nat64;
};

type ContributeRequest = record {
  pool_id: text;
  amount: nat64;
  message: opt text;
  is_anonymous: bool;
};

type ProcessCaseRequest = record {
  case_id: text;
  status: CaseStatus;
  admin_notes: opt text;
};

// Result types
type Result_User = variant { Ok: User; Err: text };
type Result_Medicine = variant { Ok: Medicine; Err: text };
type Result_Medicines = variant { Ok: vec Medicine; Err: text };
type Result_Text = variant { Ok: text; Err: text };
type Result_Prescription = variant { Ok: Prescription; Err: text };
type Result_VecUser = variant { Ok: vec User; Err: text };
type Result_UserStats = variant { Ok: UserStats; Err: text };
type Result_SystemOverview = variant { Ok: SystemOverview; Err: text };
type Result_VecVerification = variant { Ok: vec VerificationRequest; Err: text };
type Result_Verification = variant { Ok: VerificationRequest; Err: text };
type Result_VerificationStatusInfo = variant { Ok: VerificationStatusInfo; Err: text };
type Result_PatientCase = variant { Ok: PatientCase; Err: text };
type Result_VecPatientCase = variant { Ok: vec PatientCase; Err: text };
type Result_ContributionPool = variant { Ok: ContributionPool; Err: text };
type Result_VecContributionPool = variant { Ok: vec ContributionPool; Err: text };
type Result_Contribution = variant { Ok: Contribution; Err: text };
type Result_VecContribution = variant { Ok: vec Contribution; Err: text };

type ChatMessage = record { role: text; content: text };

type GeneralChatContext = record { user_type: text };

type PrescriptionChatContext = record { user_type: text; prescription_data: text };

type MedicineChatContext = record { user_type: text; medicine_data: text };

service : {
  // User functions
  register_user: (record { name: text; email: text; role: UserRole; license_number: text }) -> (Result_User);
  register_user_with_principal: (record { name: text; email: text; role: UserRole; license_number: text; user_principal: text }) -> (Result_User);
  register_user_simple: (text, text, UserRole, text) -> (Result_User);
  get_user: (text) -> (opt User) query;
  list_user_principals: () -> (vec PrincipalEntry) query; // (principal_ent, user_id, email)

  // Prescriptions / Medicines - Updated signatures
  create_prescription: (CreatePrescriptionRequest) -> (Result_Text);
  get_prescription: (text, text) -> (Result_Prescription); // prescription_id, verification_code
  get_prescription_by_code: (text) -> (opt Prescription) query;
  get_prescription_legacy: (text, text) -> (Result_Prescription) query; // For backward compatibility
  get_all_medicines: () -> (vec Medicine) query;
  get_doctor_medicines: (text) -> (vec Medicine) query;
  get_doctor_prescriptions: (text) -> (vec Prescription) query;
  add_medicine: (record { name: text; dosage: text; frequency: text; duration: text; side_effects: text; guide_text: text; guide_source: text }) -> (Result_Medicine);
  toggle_medicine_status: (text) -> (Result_Medicine);

  // Admin functions
  admin_exists: () -> (bool) query;
  get_all_doctors: () -> (Result_VecUser) query;
  get_all_patients: () -> (Result_VecUser) query;
  get_user_stats: (text) -> (Result_UserStats) query;
  get_system_overview: () -> (Result_SystemOverview) query;

  // Verification functions
  submit_verification_request: (SubmitVerificationRequest) -> (Result_Text);
  get_all_verification_requests: () -> (Result_VecVerification) query;
  get_pending_verification_requests: () -> (Result_VecVerification) query;
  get_verification_request: (text) -> (Result_Verification) query;
  process_verification_request: (ProcessVerificationRequest) -> (Result_Text);
  get_doctor_verification_status: (text) -> (Result_VerificationStatusInfo) query;

  // NGO and Case Management functions
  submit_patient_case: (SubmitCaseRequest) -> (Result_Text);
  get_all_patient_cases: () -> (Result_VecPatientCase) query;
  get_pending_patient_cases: () -> (Result_VecPatientCase) query;
  get_approved_patient_cases: () -> (Result_VecPatientCase) query;
  get_my_patient_cases: () -> (Result_VecPatientCase) query;
  get_patient_case: (text) -> (Result_PatientCase) query;
  process_patient_case: (ProcessCaseRequest) -> (Result_Text);
  
  create_contribution_pool: (CreatePoolRequest) -> (Result_Text);
  get_contribution_pools: () -> (Result_VecContributionPool) query;
  get_active_contribution_pools: () -> (Result_VecContributionPool) query;
  get_ngo_contribution_pools: (text) -> (Result_VecContributionPool) query;
  get_contribution_pool: (text) -> (Result_ContributionPool) query;
  
  contribute_to_pool: (ContributeRequest) -> (Result_Text);
  get_pool_contributions: (text) -> (Result_VecContribution) query;
  get_user_contributions: () -> (Result_VecContribution) query;

  // Utilities
  greet: (text) -> (text) query;
  icrc10_supported_standards: () -> (vec text) query;
  icrc28_trusted_origins: () -> (text);

  // AI Chat Functions
  chat_general: (vec ChatMessage, GeneralChatContext) -> (Result_Text);
  chat_prescription: (vec ChatMessage, PrescriptionChatContext) -> (Result_Text);
  chat_medicine: (vec ChatMessage, MedicineChatContext) -> (Result_Text);
  get_prescription_ai_help: (text, text, text) -> (Result_Text);
  get_medicine_ai_help: (text) -> (Result_Text);
};